[build-system]
requires = ["scikit-build-core>=0.8.0", "pybind11>=2.12.0"]
build-backend = "scikit_build_core.build"

[project]
name = "status-rollup"
dynamic = ["version"]
description = "Hierarchical status monitoring and rollup with configurable aggregation rules"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: C++",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Monitoring",
]
keywords = ["monitoring", "status", "health-check", "rollup", "aggregation"]

[project.urls]
Homepage = "https://github.com/cmilhaupt/status-rollup"
Repository = "https://github.com/cmilhaupt/status-rollup"
Documentation = "https://github.com/cmilhaupt/status-rollup/blob/main/README.md"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.8"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Install the Python package files
wheel.install-dir = "status_rollup"

# CMake configuration
cmake.version = ">=3.14"
cmake.build-type = "Release"
cmake.args = ["-DBUILD_PYTHON_BINDINGS=ON"]

# Exclude test files and examples from wheel
wheel.exclude = ["tests/", "examples/"]

[tool.cibuildwheel]
# Build for common platforms
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*", "cp314-*"]
skip = ["*-musllinux*", "pp*"]  # Skip musllinux and PyPy for now

# Use manylinux_2_28 for C++20 support (GCC 11+)
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"

# macOS: Set deployment target for C++20 support
[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

# Debug before testing - show what's installed
before-test = "python -c \"import os, status_rollup; d=os.path.dirname(status_rollup.__file__); print('Module dir:', d); print('Contents:'); [print('  ', f) for f in os.listdir(d)]\""

# Test the wheel
test-command = "python -c \"import status_rollup; print(status_rollup.__version__)\""
test-requires = ["pytest"]
test-extras = ["test"]

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "CMakeLists.txt"
regex = 'project\([^\)]+VERSION\s+(?P<value>[0-9.]+)'

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "B", "I", "N", "UP", "YTT", "S", "BLE", "A", "C4", "T10", "ISC", "ICN", "PIE", "PYI", "Q", "RSE", "RET", "SIM", "TID", "ARG", "PLE", "PLW", "NPY", "RUF"]
ignore = ["S101"]  # Allow assert statements

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
